// <auto-generated />
using System;
using CigarWorld.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CigarWorld.Data.Migrations
{
    [DbContext(typeof(CigarWorldDbContext))]
    [Migration("20221124234042_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CigarWorld.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a67ddfe2-5d26-45c2-bbe9-7fb8f4ef5138",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff9bacf0-4376-42ae-845d-ad5e4e2d8436",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            Introduction = "I am Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJn73s4DOUx1kUbYj0EtiXuScakH0mJG8VbYOp+GoDBFZTvyOXg7XvFjMpQNJA6JLw==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "Empty",
                            SecurityStamp = "4eef386c-6e82-4c73-ae28-7ebd69d2b2f9",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "ac1f591e-d6b3-f4ef-bc1f-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d15cc1d-f376-4f4d-b98c-9838b7b811ce",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            Introduction = "I am guest",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@MAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEKrvkihy41DkYU3X8KiIGIzQmExk+8PzmhKgtQWvFr0hMa3SaH95gr4yhHVXivmyKw==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "Empty",
                            SecurityStamp = "70a593bb-2ae8-4ff2-931d-ff9f1c2f6e6b",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Ashtray", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AshtrayId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CountryOfManufacturing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AshtrayId");

                    b.ToTable("Ashtrays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AshtrayId = 1,
                            Brand = "Lubinski",
                            Comment = "Really nice and colorful ashtray.",
                            CountryOfManufacturing = "China",
                            ImageUrl = "https://m.media-amazon.com/images/I/51xDDJtDbBL._AC_SY1000_.jpg"
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.AshtrayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AshtrayTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "For cigars"
                        },
                        new
                        {
                            Id = 2,
                            Name = "For Cigarillos"
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Cigar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CountryOfManufacturing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<double>("Ring")
                        .HasColumnType("float");

                    b.Property<int>("SmokingDuration")
                        .HasMaxLength(300)
                        .HasColumnType("int");

                    b.Property<int>("StrengthId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StrengthId");

                    b.ToTable("Cigars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Cohiba",
                            Comment = "This cigar is very unice. The taste, smoke from she and the flavor make the cigar a very special.",
                            CountryOfManufacturing = "Cuba",
                            Format = "Vitola",
                            ImageUrl = "https://kalimancaribe.com/images/thumbnails/650/366/detailed/5/COHIBA_BEHIKE_BHK_52.jpg",
                            Length = 119,
                            Ring = 52.0,
                            SmokingDuration = 90,
                            StrengthId = 1
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Cigarillo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CountryOfManufacturing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FiterId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FiterId");

                    b.ToTable("Cigarillos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Clubmaster",
                            Comment = "This Cigarillos have a very nice taste and nice flavor.",
                            CountryOfManufacturing = "Germany",
                            FiterId = 1,
                            ImageUrl = "https://i.colnect.net/f/4259/015/Clubmaster-Mini.jpg"
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.CigarPocketCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CountryOfManufacturing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialOfManufacture")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CigarPocketCases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Visol",
                            Capacity = 4,
                            Comment = "Expertly crafted with the small cigar smoker in mind, the premium quality Visol Landon Carbon Fiber Mini Cigar Case allows you toss away your ugly cigarillo boxes and carry up to 4- little stogies in style..",
                            CountryOfManufacturing = "Germany",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRev3HE7yrOrEkefMQhkif-qti8T5pm9262jQ&usqp=CAU",
                            MaterialOfManufacture = "Оak"
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Cutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CountryOfManufacturing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Cutters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Cohiba",
                            Comment = "Really nice and sharp cutter.",
                            CountryOfManufacturing = "Chuba",
                            ImageUrl = "https://mikescigars.com/media/catalog/product/cache/0fe343e181b5504db207ac8c729e73b7/h/t/Cohiba-Cutter-each.jpg",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.CutterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CutterTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Guillotine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "V-Cut"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Point"
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.FilterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FilterTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Standard"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cherry"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mint"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Vanila"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Humidor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CountryOfManufacturing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("MaterialOfManufacture")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Humidors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "The Hampton",
                            Capacity = 50,
                            Comment = "This remarkable black lacquer piece features a diamond pattern bonded leather inlay w/ red accent stitching.",
                            CountryOfManufacturing = "Cuba",
                            Height = 20.0,
                            ImageUrl = "https://www.cigarhumidors-online.com/media/catalog/product/cache/1/image/430x295/9df78eab33525d08d6e5fb8d27136e95/h/m/hmptnblu6.jpg",
                            Length = 20.0,
                            MaterialOfManufacture = "Оak",
                            Weight = 5.0
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Lighter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CountryOfManufacturing")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lighters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Cohiba",
                            Comment = "Very nice lighter.",
                            CountryOfManufacturing = "Cuba",
                            ImageUrl = "https://lacasadelhabano-thehague.com/wp-content/uploads/2020/10/briquet-ligne-2-cohiba-016110-01.png"
                        });
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserAshtray", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("AshtrayId")
                        .HasColumnType("int")
                        .HasColumnName("AshtrayId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "AshtrayId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("AshtrayId");

                    b.ToTable("UserAshtray");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserCigar", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("CigarId")
                        .HasColumnType("int")
                        .HasColumnName("CigarId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "CigarId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CigarId");

                    b.ToTable("UserCigar");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserCigarillo", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("CigarilloId")
                        .HasColumnType("int")
                        .HasColumnName("CigarilloId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "CigarilloId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CigarilloId");

                    b.ToTable("UserCigarillo");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserCigarPocketCase", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("CigarPocketCaseId")
                        .HasColumnType("int")
                        .HasColumnName("CigarPocketCaseId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "CigarPocketCaseId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CigarPocketCaseId");

                    b.ToTable("UserCigarPocketCase");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserCutter", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("CutterId")
                        .HasColumnType("int")
                        .HasColumnName("CutterId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "CutterId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CutterId");

                    b.ToTable("UserCutter");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserHumidor", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("HumidorId")
                        .HasColumnType("int")
                        .HasColumnName("HumidorId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "HumidorId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("HumidorId");

                    b.ToTable("UserHumidor");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserLighter", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("LighterId")
                        .HasColumnType("int")
                        .HasColumnName("LighterId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "LighterId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LighterId");

                    b.ToTable("UserLighter");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.StrengthType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StrengthTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mild"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Full"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Ashtray", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.AshtrayType", "AshtrayType")
                        .WithMany()
                        .HasForeignKey("AshtrayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AshtrayType");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Cigar", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.StrengthType", "StrengthType")
                        .WithMany()
                        .HasForeignKey("StrengthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrengthType");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Cigarillo", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.FilterType", "FilterType")
                        .WithMany()
                        .HasForeignKey("FiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterType");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.Cutter", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.CutterType", "CutterType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CutterType");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserAshtray", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CigarWorld.Data.Models.Ashtray", "Ashtray")
                        .WithMany()
                        .HasForeignKey("AshtrayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Ashtray");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserCigar", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserCigar")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CigarWorld.Data.Models.Cigar", "Cigar")
                        .WithMany()
                        .HasForeignKey("CigarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Cigar");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserCigarillo", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CigarWorld.Data.Models.Cigarillo", "Cigarillo")
                        .WithMany()
                        .HasForeignKey("CigarilloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Cigarillo");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserCigarPocketCase", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CigarWorld.Data.Models.CigarPocketCase", "CigarPocketCase")
                        .WithMany()
                        .HasForeignKey("CigarPocketCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("CigarPocketCase");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserCutter", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CigarWorld.Data.Models.Cutter", "Cutter")
                        .WithMany()
                        .HasForeignKey("CutterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Cutter");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserHumidor", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CigarWorld.Data.Models.Humidor", "Humidor")
                        .WithMany()
                        .HasForeignKey("HumidorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Humidor");
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ManyToMany.UserLighter", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CigarWorld.Data.Models.Lighter", "Lighter")
                        .WithMany()
                        .HasForeignKey("LighterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Lighter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CigarWorld.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CigarWorld.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserCigar");
                });
#pragma warning restore 612, 618
        }
    }
}
